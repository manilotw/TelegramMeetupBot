import os
import sys
import django
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "bot_backend.settings")
django.setup()

try:
    from event_planner.models import Speaker, Question, User, Organizer
    from event_planner.utils import get_schedule, get_user_role, remove_expired_speakers
    from event_planner.helpers import create_inline_keyboard, create_reply_keyboard, is_ask_question_command, is_about_command, is_sent_donat, is_speaker_selected, is_speaker_selected_state, is_view_questions_command, user_states
except Exception as e:
    print(f"Error importing models: {e}")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = TeleBot(TELEGRAM_BOT_TOKEN)

def main():
    @bot.message_handler(commands=['start'])
    def start(message):
        tg_id = str(message.chat.id)
        username = message.from_user.username
        try:
            user, created = User.objects.get_or_create(
                tg_id=tg_id,
                defaults={
                    'first_name': message.from_user.first_name,
                    'last_name': message.from_user.last_name,
                    'username': username,
                }
            )
            user.role = get_user_role(tg_id, username) or 'listener'
            user.save()

            keyboard = create_reply_keyboard(user.role)
            role_name = '–î–æ–∫–ª–∞–¥—á–∏–∫' if user.role == 'speaker' else '–°–ª—É—à–∞—Ç–µ–ª—å'

            bot.send_message(
                message.chat.id,
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
                f"–°–µ–∏ÃÜ—á–∞—Å –í—ã - {role_name}  Ôºº(Ôºæ‚ñΩÔºæ)Ôºè\n\n"
                "–î–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –î–æ–∫–ª–∞–¥—á–∏–∫–æ–º –∏ –°–ª—É—à–∞—Ç–µ–ª–µ–º.\n\n"
                "---------–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏---------\n\n"
                "üé§:\n–î–æ–∫–ª–∞–¥—á–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ–ª—É—á–∏–ª –æ—Ç –°–ª—É—à–∞—Ç–µ–ª–µ–π.\n"
                "üßè‚Äç‚ôÇÔ∏è:\n–°–ª—É—à–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤—ã—Å—Ç—É–ø–∞—é—â–µ–º—É –°–ø–∏–∫–µ—Ä—É, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—åüí∏.\n\n"
                "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ))\n(–°–ø–æ–π–ª–µ—Ä: —ç—Ç–æ —É–¥–æ–±–Ω–æ)",
                reply_markup=keyboard
            )
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

    @bot.message_handler(func=is_about_command)
    def handle_about(message):
        try:
            schedule = get_schedule()
            bot.send_message(message.chat.id, f"{schedule}\n")
        except Exception as e:
            bot.send_message(
                message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

    @bot.message_handler(func=is_ask_question_command)
    def question_address(message):
        tg_id = str(message.chat.id)
        speakers = Speaker.objects.all()
        if not speakers.exists():
            bot.send_message(
                message.chat.id,
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫–ª–∞–¥—á–∏–∫–æ–≤.  ï‡≤†·¥•‡≤† î"
            )
            return

        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å? \n ï ·µî·¥•·µî  î"
        )
        keyboard = create_inline_keyboard(speakers)
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞",
            reply_markup=keyboard
        )
        user_states[tg_id] = 'speaker_selected'

    @bot.callback_query_handler(func=is_speaker_selected)
    def handle_speaker_selected(call):
        tg_id = str(call.message.chat.id)
        try:
            speaker = Speaker.objects.filter(tg_id=call.data).first()
            if not speaker:
                raise ValueError("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞")

            user_states[tg_id] = {
                'state': 'speaker_selected',
                'speaker_id': call.data
            }
            bot.send_message(
                call.message.chat.id,
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {speaker.name}.\n"
                "–¢–µ–ø–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.  ï ·µî·¥•·µî  î"
            )
        except ValueError:
            bot.send_message(
                call.message.chat.id,
                "–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            user_states.pop(tg_id, None)

    @bot.message_handler(func=is_speaker_selected_state)
    def save_question(message):
        tg_id = str(message.chat.id)
        user_state = user_states.get(tg_id)
        if not user_state or 'speaker_id' not in user_state:
            bot.send_message(
                message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        speaker_id = user_state['speaker_id']
        user = User.objects.filter(tg_id=tg_id).first()
        speaker = Speaker.objects.filter(tg_id=speaker_id).first()

        if speaker:
            Question.objects.create(
                user=user, speaker=speaker, text=message.text)
            bot.send_message(message.chat.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. („Å£ ·µî·¥•·µî)„Å£")

        else:
            bot.send_message(
                message.chat.id, "–î–æ–∫–ª–∞–¥—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        user_states.pop(tg_id, None)

    @bot.message_handler(func=is_view_questions_command)
    def view_questions(message):
        speaker = Speaker.objects.filter(
            tg_id=f"@{message.from_user.username}").first()

        questions = Question.objects.filter(
            speaker=speaker).order_by('-created_at')
        if questions.exists():
            response = "–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n\n" + "\n".join(
                [f"{q.user.first_name}: {q.text}" for q in questions]
            )
        else:
            response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
        bot.send_message(message.chat.id, response)

    @bot.message_handler(func=is_sent_donat)
    def send_donat(message):
        try:
            speaker = Organizer.objects.all().first()
            if speaker and speaker.card_num:
                bot.send_message(
                    message.chat.id,
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!‡´Æ À∂·µî ·µï ·µîÀ∂ ·Éê\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∫–∞—Ä—Ç—ã:\n{speaker.card_num}"
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω. ‚îê( Àò_Àò )‚îå"
                )
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling()
